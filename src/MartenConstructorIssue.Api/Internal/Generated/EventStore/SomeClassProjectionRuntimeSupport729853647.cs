// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using MartenConstructorIssue.Api;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: SomeClassProjectionLiveAggregation729853647
    public class SomeClassProjectionLiveAggregation729853647 : Marten.Events.Aggregation.SyncLiveAggregatorBase<MartenConstructorIssue.SomeClass>
    {
        private readonly MartenConstructorIssue.Api.SomeClassProjection _someClassProjection;

        public SomeClassProjectionLiveAggregation729853647(MartenConstructorIssue.Api.SomeClassProjection someClassProjection)
        {
            _someClassProjection = someClassProjection;
        }



        public override MartenConstructorIssue.SomeClass Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, MartenConstructorIssue.SomeClass snapshot)
        {
            if (!events.Any()) return null;
            MartenConstructorIssue.SomeClass someClass = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public MartenConstructorIssue.SomeClass Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            var byteArray1 = new System.Byte[]{};
            var guid1 = new System.Guid(byteArray1);
            var byteArray2 = new System.Byte[]{};
            var guid2 = new System.Guid(byteArray2);
            var stringValueList = new System.Collections.Generic.List<string>{};
            var someClass = new MartenConstructorIssue.SomeClass(guid1, guid2, stringValueList);
            switch (@event)
            {
                case Marten.Events.IEvent<MartenConstructorIssue.AnEventForCreating> event_AnEventForCreating1:
                    someClass = _someClassProjection.Create(event_AnEventForCreating1.Data);
                    break;
            }

            return null;
        }


        public MartenConstructorIssue.SomeClass CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for MartenConstructorIssue.SomeClass or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }


        public MartenConstructorIssue.SomeClass Apply(Marten.Events.IEvent @event, MartenConstructorIssue.SomeClass aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<MartenConstructorIssue.AnotherEvent> event_AnotherEvent2:
                    aggregate = _someClassProjection.Apply(event_AnotherEvent2.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: SomeClassProjectionLiveAggregation729853647
    
    
    // START: SomeClassProjectionInlineHandler729853647
    public class SomeClassProjectionInlineHandler729853647 : Marten.Events.Aggregation.AggregationRuntime<MartenConstructorIssue.SomeClass, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<MartenConstructorIssue.SomeClass, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<MartenConstructorIssue.SomeClass, System.Guid> _storage;
        private readonly MartenConstructorIssue.Api.SomeClassProjection _someClassProjection;

        public SomeClassProjectionInlineHandler729853647(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<MartenConstructorIssue.SomeClass, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<MartenConstructorIssue.SomeClass, System.Guid> storage, MartenConstructorIssue.Api.SomeClassProjection someClassProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _someClassProjection = someClassProjection;
        }



        public override async System.Threading.Tasks.ValueTask<MartenConstructorIssue.SomeClass> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<MartenConstructorIssue.SomeClass, System.Guid> slice, Marten.Events.IEvent evt, MartenConstructorIssue.SomeClass aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<MartenConstructorIssue.AnEventForCreating> event_AnEventForCreating6:
                    aggregate = _someClassProjection.Create(event_AnEventForCreating6.Data);
                    return aggregate;
                case Marten.Events.IEvent<MartenConstructorIssue.AnEventForDeleting> event_AnEventForDeleting4:
                    return null;
                    return aggregate;
                case Marten.Events.IEvent<MartenConstructorIssue.AnotherEvent> event_AnotherEvent5:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for MartenConstructorIssue.SomeClass should either have a static Create method that returns the event type Marten.Events.IEvent<MartenConstructorIssue.AnotherEvent> or MartenConstructorIssue.SomeClass should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<MartenConstructorIssue.AnotherEvent> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _someClassProjection.Apply(event_AnotherEvent5.Data, aggregate);
                    return aggregate;
            }

            return aggregate;
        }


        public MartenConstructorIssue.SomeClass Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            var stringValueList = new System.Collections.Generic.List<string>{};
            var byteArray2 = new System.Byte[]{};
            var guid2 = new System.Guid(byteArray2);
            var byteArray1 = new System.Byte[]{};
            var guid1 = new System.Guid(byteArray1);
            var someClass = new MartenConstructorIssue.SomeClass(guid1, guid2, stringValueList);
            switch (@event)
            {
                case Marten.Events.IEvent<MartenConstructorIssue.AnEventForCreating> event_AnEventForCreating3:
                    someClass = _someClassProjection.Create(event_AnEventForCreating3.Data);
                    break;
            }

            return null;
        }


        public MartenConstructorIssue.SomeClass CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for MartenConstructorIssue.SomeClass or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }

    }

    // END: SomeClassProjectionInlineHandler729853647
    
    
}

